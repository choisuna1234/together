1. 깃허브 아이디 생성
- 이미 다 있으니 패스

2. 소스트리 설치
- https://www.sourcetreeapp.com/ 
- 위 사이트로 이동 
- 각자 본인 컴퓨터가 해당하는 파일을 다운 받으면 된다
- Ex> Download for Windows / 64bit
- 1) bitbucket사용 안하고 있으니 하단의 건너뛰기 누르면된다.
- 2) Mercurial사용 안하고 있으니 Git만 클릭 후 넘어가면 된다.
- 3) SSH키 없으니 없음 표시하고 넘어가면 된다.
<혹시 SSH가 궁금하신 분은 
https://medium.com/@jamessoun93/ssh%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94-87b58c521d6f 
아래 사이트로 이동해서 보시면 됩니다. >
<깃허브 사이트에서 SSH를 받아서 사용할 수도 있습니다. >


3. 소스트리 용어 설명
- 주요 용어 
<Commit, push, pull, Marge, Clone Branch, Repository, Fetch, Stach(아직 사용 못해봄)>

1) Commit (커밋)
 - 파일 및 폴더의 추가 및 변경사항을 Repository에 저장하는 것

2) Repository(저장소)<레파지토리 개발자들 사이에선 레포 (repo)라고만 불린다>
- 저장소 개념이다 깃허브 안에서 레파지토리를 만들고(저장소를 만들고) 그 안에다 작업한 파일을 올리고 내려받고 할 예정입니다.

3) Push(푸쉬 / 올리기)
- 푸쉬를 하게 되면 로컬 저장소에 있는 소스가 원격 저장소에 올라가짐 
<
	원격 저장소 >> 깃허브에 만들어진 레파지토리를 의미합니다.
	로컬 저장소 >> 내 프로젝트 파일을 설정해둔 파일을 의미합니다
		>>>>원래는 클론에 지정되어있는 파일을 의미합니다.
>

4) Pull (풀 / 내려받기)
- pull을 하게 되면 원격저장소에 있는 소스(파일)들을 개인 로컬저장소로 가지고 오게 됩니다. 
- pull를 진행하기 이전에 원격저장소에 변경이 있을경우 fatch를 눌러줍니다.

5) Fetch(패치)
- 새로고침 기능이라 생각하시면 됩니다.
- 레파지토리에 변경사항이 생겼을 경우 페치를 눌러 정보를 가져옵니다. 

6) Branch (브랜치)
- 브랜치를 이해하기 위해 좋은예시...? 
- 나뭇가지와 같다 하나의 기둥에서 여러 갈래로 뻗어 나가게 만든다
- 병합(Marge)를 통해서 main 파일? 로 합칠수 있다. 

7) Marge(마지 / 병합)
- 브랜치로 만들어둔 여러 파일들을 그냥 냅두면 나만 볼수 있고 아무도 보지 못합니다. 
- 병합을 해줘야 메인으로 넘어가면서 메인 프로젝트에 띄워지게 됩니다. 

8) Stach(아직 저도 사용안해봐서 모르지만 설명은 이렇다)
- 로컬저장소에서 작업한 소스를 임시로 다른 곳에 저장해두는 기능입니다. 
- 백업기능은 아니다. 
- 임시저장소이기 때문에 금방 사용할 정도로만 사용하는 곳이고 백업은 따로 해두는게 좋다
- 백업 방법은 자신의 프로젝트를 그날그날마다 알집으로 묶어놓고 정리 해두면 만약 프로젝트가 고장났을 시 그 백업 파일은 다시 풀어서 임포트 하면 된다. 

***
<Conflict 충돌> : 오류라고 생각하시면 됩니다. 
여러명이 작업할 때 똑같은 위치의 소스를 수정 및 삭제를 한 후, 병합한다면 뜹니다.. 
작업을 시작하기전 자신의 파트가 무엇인지 정확하게 알고 담당하는 파트에 관해서만 소스들을 관리해줘야 충돌이 안생깁니다. 

4. 깃허브 레파지토리 생성(각각 + 1명에 다같이)
- 레파지토리는 저장소다. 
- 레파지토리 생성하는 방법은 
1> 깃허브에 들어간다
2> 로그인 후 자신의 페이지로 넘어가면 레파지토리 생성기능이 있습니다.
3> 공개범위를 public / private 로 설정할수 있는데 왠만해선 public으로 사용하고 private 는 잘 안씀 >> private도 만들수 있는 갯수 제한이 있습니다. 

- 자신의 레파지토리가 생성되었습니다. 

4-1 소스트리 사용해서 자신의 레파지토리에 파일 올리기 
1> 자신이 생성한 레파지토리에 있는 경로 코드를 가져옵니다.
2> 소스트리 위에 + 버튼을 눌러줍니다. 
3> 상단부에 Clone을 클릭합니다.
4> 첫 번째 칸은 자신의 깃허브 레파지토리 주소를 적는 칸입니다.
	ex > https://github.com/SaWonJin/test.git
5> 두번째 칸은 자신의 컴퓨터 내에 로컬 저장소를 지정하는 칸입니다. 
>> 맨 마지막 이름은 자연스럽게 두 번째 칸의 폴더 이름으로 들어가게됩니다. 

처음 빈화면이 뜹니다 
<설정 부분이 들어가야 한다
 1> 소스트리 툴 오른쪽 상단의 설정을 누르면 
 2> 저정소 설정 화면이 뜬다. 
 3> 추가 버튼을 눌러준다 
 4> 원격이름은 구분하기 위한 이름이기때문에 아무거나 적어주시면 됩니다. 
 5> 뭘 적어야할지 모르겠다 싶으면 옆에 체크박스 클릭
 6> URL을 적는 란은 자신의 레파지토리 경로를 적는곳입니다.
 7> 맨 밑 사용자 명은 자신이 깃허브에서 사용하고 있는 사용자명을 그대로 적어주셔야 합니다. 안그러면 헷갈려요>

6> 자신이 지정한 로컬 폴더로 들어가서 메모장 파일을 하나 만들어 봅시다
7> 소스트리로 돌아와 보면 파일을 올릴 수 있는 칸이 생성되었습니다.
 내가 만든 파일 옆 + 버튼을 눌러 상단의 스테이지로 올립니다.
8> 맨 아래 있는 빈 칸은 설명을 적는 칸입니다
 첫 번째 줄은 변경점을 한눈에 알수 있게 정리해서 간단하게 적은 뒤 
 한줄 띄고 세번째 줄 부터 자세한 설명을 적어주시면 됩니다. 
 커밋을 눌러주세요

위 상황이
파일이 소스트리 안에서는 올라와 있지만 깃허브 안에 등록되어 있는 상태는 아닙니다. 

따라서, 내가 커밋해둔 파일을 깃허브 저장소(레파지토리)로 올리기 위해서는 상단 부분에 push를 눌러줘야 합니다. 

푸쉬를 누르면 아이디를 입력하라고 할수도 있다 >> 여기서 토큰 설명 
5-1 토큰 생성 및 토큰 설명

완료 된 후 자신의 깃허브로 돌아가 레파지토리를 확인하면 파일이 올라간것을 확인할 수 있습니다. 



5. 레파지토리 인원 추가
 - 한명 계정의 레파지토리를 공유하는 것이다. 
 - 프로젝트를 진행하기 위해서 한명의 레파지토리를 지정해 놓아야 합니다. 
 - 그 레파지토리의 주인이 마스터가 될텐데 마스터는 다른사람들과 소통하며 push시간과 내용들을 조절해 주어야한다 안하면 충돌 난다.

 - 추가하는 방법 
 1> 내 레파지토리에서 다른사람들과 협업을 진행한다는 가정하에 설명하겠습니다. 
 2> 내 레파지 토리로 들어가게 되면 상단에 옵션 / settings부분이 있습니다.
 3> 들어가서 collaborators를 들어가면 add people이 있는데 클릭하시면 아이디를 적을 수 있는 창이 뜹니다. 
 4> 같이 협업을 할 사람의 아이디를 적은 후 완료버튼을 누르면 상대방에게 메일이 전송됩니다. 
 5> 협업 메일을 받은 상대방은 메일로 받은 URL로 들어가 승인해주면 됩니다. 

5-1 토큰 생성 및 토큰 설명
- 토큰 생성하는 방법
- 깃허브에서 토큰이란 약간 인증서개념이라 생각하면된다.. 

1> 자신의 프로필을 누르면 밑에 셋팅 있다 들어가자
2> 자신의 프로필 설정에서 밑에 보면 Devaloper settings / 개발자 설정 이라고 있습니다
3> 3개의 메뉴 중에서 access tokens를 클릭하시고 
4> 새로운 토큰을 만드는 버튼을 클릭하시면 됩니다. 
5> 첫 번째 빈칸은 토큰의 사용 용도를 묻는 칸인데 project정도 입력하시면 됩니다. 
6> 저희는 소스트리를 위한 토근을 만드는거라 repo부분만 클릭하시고 맨 아래 버튼을 누르시면 영어와 숫자가 조합된 코드 하나가 나옵니다. .
7> 이 코드가 토큰으로 잘 보관하셔야합니다. 

6. 소스트리 와 깃허브 연동
 1> 소스트리 내에서 클론을 들어간다 
 2> 클론안에서 메인으로 사용할 레파지토리의 경로를 작성 후 자신의 프로젝트가 있는 파일을 목적지 경로로 설정한다. 
 여기서 바로 파일들을 올려버리면 메인 레파지토리로 내 파일들이 올라가게 된다. 그것을 방지위해서 필요한게 브랜치이다. 



7. 커밋 > 푸시 > 풀 개념  <패치 개념 (업데이트 같은거임)>



8. 브랜치 개념 설명 
 > 브랜치는 정말 필요한 기능이다
 > 브랜치는 각자의 파일을 만들어 작업 한 뒤 한곳으로 뭉치기 전, 작업공간이라 생각하자. 
 > 각각의 브랜치에서 작업을 진행한 뒤 marge를 통해 병합을 진행하게 된다. 
 > 여기서 주의할 점은 한번에 두사람이 같이 push했을 경우 오류가 날수 있기 때문에 조심하자



9. 주의할 점 메인 브랜치는 관리자가 관리하는데 따로 설정하는 것이 없다. 
 > 다같이 소통하면서 한명이 올리고 한명이 올리고 
10. 겹쳐진 파일을 올리는 경우 덮어쓰기가 된다. 
11. 여기서 백업의 중요성
하지만 깃허브 내에서 그 전 코드가 뭐였는지 확인 가능

깃 이그노어 사용법 추가 
https://programming119.tistory.com/105